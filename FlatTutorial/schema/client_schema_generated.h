// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CLIENTSCHEMA_CLIENT_H_
#define FLATBUFFERS_GENERATED_CLIENTSCHEMA_CLIENT_H_

#include "flatbuffers/flatbuffers.h"

namespace Client {

struct Vec3;

struct Client;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3() {
    memset(this, 0, sizeof(Vec3));
  }
  Vec3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

struct Client FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_POS = 6,
    VT_MSG = 8
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  const Vec3 *pos() const {
    return GetStruct<const Vec3 *>(VT_POS);
  }
  const flatbuffers::String *msg() const {
    return GetPointer<const flatbuffers::String *>(VT_MSG);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID) &&
           VerifyField<Vec3>(verifier, VT_POS) &&
           VerifyOffset(verifier, VT_MSG) &&
           verifier.VerifyString(msg()) &&
           verifier.EndTable();
  }
};

struct ClientBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(Client::VT_ID, id, 0);
  }
  void add_pos(const Vec3 *pos) {
    fbb_.AddStruct(Client::VT_POS, pos);
  }
  void add_msg(flatbuffers::Offset<flatbuffers::String> msg) {
    fbb_.AddOffset(Client::VT_MSG, msg);
  }
  explicit ClientBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ClientBuilder &operator=(const ClientBuilder &);
  flatbuffers::Offset<Client> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Client>(end);
    return o;
  }
};

inline flatbuffers::Offset<Client> CreateClient(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    const Vec3 *pos = 0,
    flatbuffers::Offset<flatbuffers::String> msg = 0) {
  ClientBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_msg(msg);
  builder_.add_pos(pos);
  return builder_.Finish();
}

inline flatbuffers::Offset<Client> CreateClientDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    const Vec3 *pos = 0,
    const char *msg = nullptr) {
  return Client::CreateClient(
      _fbb,
      id,
      pos,
      msg ? _fbb.CreateString(msg) : 0);
}

inline const Client::Client *GetClient(const void *buf) {
  return flatbuffers::GetRoot<Client::Client>(buf);
}

inline const Client::Client *GetSizePrefixedClient(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Client::Client>(buf);
}

inline bool VerifyClientBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Client::Client>(nullptr);
}

inline bool VerifySizePrefixedClientBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Client::Client>(nullptr);
}

inline void FinishClientBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Client::Client> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedClientBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Client::Client> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Client

#endif  // FLATBUFFERS_GENERATED_CLIENTSCHEMA_CLIENT_H_
